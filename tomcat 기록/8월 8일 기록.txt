*out객체
out이라는 기본 객체를 통한 출력이 일어난다.
<!DOCTYPE html> 이거랑
out.println("<!DOCTYPE html>"); 이거랑 같다

out은 출력을 할 수 있는 기본 객체

우리가 자바코드랑 <p> 테그 같은거 나눌때 <% %>로 끊어서 사용했는데
out.println("<p>  </p>"); 이렇게 바로  쓸 수 있게 된다.

<%@ page autoFlush = "true" %> 출력 버퍼를 자동으로 비우는것
보통 기본값이다.

*응답객체 response
우리가 원하는 응답을 만들기 위해 조작 할 수 있는 객체
원하는 header를 설정 할 수 있고
원하는 body도 설정 할 수 있다.

사용자의 페이지로 이동하라는 메소드??
redirect = 출력 버퍼를 안내보내고 
sendRedirect("리다이렉트 값"); 값만 나온다.

redirect가 새요청을 만든다. 전달받은 주소로

1요청 1응답.
redirect는

client가 server 에 요청을 한다. server는 client에게 id를 주면
한번 더 요청했을때 기억이 남는다.
그러면 client가 server에게 요청하면 한번 왔던 client라는 것을
기억하게 된다.
session 서버에
session id
cookie 클라이언트에

http 프로토콜에 상태가 없음을 살펴보면 된다.
상태라는 것을 기억할 것인데 누가 어떻게 하느냐에 따라서 이름이 조금 다르다
서버가 기억하면 세션
클라이언트 브라우저가 기억하면 쿠키.
기억을 공유를 하면 논리적인 흐름에 대해서 구현을 할 수 있다.

session id는 같은 값이지만 저장하는 값은 다를 수 있다.
server는 자기가 필요한 값을 저장할 것이고 브라우저는 서버에서 저장해라고 한 값만 저장 할 것이다.

로그인을 하면 아이디 값을 주는데 그 문자열을 베끼면 그 아이디로 로그인 되어 있다고 생각 할 수 있다.

로그인 할때 이 문자열을 가지고 잇어라 하면서 특이한 값을 가지고 있다.

만약 30분 동안 로그인 상태 유지하고 가만히 있었을때 로그아웃이 되었다면
서버가 세션을 지워서 로그인이 풀린것이다.

개논물??
논리와 보여주는 페이지를 분리를 시켜야 한다.