out = 출력 스트림
html표현, 동적으로 만들어야 하는 text용도로 출력할 수 있다


* jsp 필수 입력
input 태그에 required를 넣으면 그 태그가 공백시 제출이 안되고 메세지가 뜬다. "이 값은 필수 입니다."
하지만 만약 주소에 그 태그의 값을 공백으로 두고 enter를 치면 페이지가 넘어가게 된다.
400대의 오류 페이지가 뜨게 된다.
http 표현에 따르면 400은 사용자가 잘못 입력했을때 나오는 값이다
그러므로 만약 내 논리에서 사용자가 잘못 입력한게 있다면 400을 출력한다고 하자.
그러면 http 표현에 따라 400 즉 사용자가 잘못 입력해서 400을 출력한 것이다.


주소는 길이 제한이 있다. 많은 양의 정보를 전송할 수 없다.

* context root path
만약 form action = "  "안의 주소에 root경로는 바뀔수있다.
만약 ./root경로 / 파일이름.jsp를 했다면  root 경로가 바뀔때 마다 일일이 바꿔야 한다.
그래서 getContextPath()를 통해 root경로를 불러 올 수 있다.

주로 사용하는 프로젝트는 root주소를 없이 한다. root주소 없앨려면 root주소를 "/"로 설정하면 된다.


*context ??
개발자들이 사용하는 정보를 모아놓는곳 = context
단순히 말하면 어플리케이션 하나

개발에 필요한 정보를 모아놓는 곳.
jsp에선 객체로 구현이 되어있다.

*xml
web.xml에서 확인 할 수 있듯이 <web-app> </web-app> 여는 태그, 닫는 태그가 있다.
html보다 규칙이 까다롭다.
name 과 value는 무조건 있어야 한다.
tomcat이 name과 value로 값을 얻을 수 있다.

그래서 이걸 언제 쓰냐면 JDBC드라이버때 처럼 파일을 불러와서 읽어주기만하면 되는 그런 과정에서 쓰인다.

*web-inf
web-inf안에 파일들은 접근이 불가능하게 숨긴다.

*다시 xml
xml은 scheme과 내용으로 되어있다.
xml은 데이터를 표현하는 방식이 태그로 표현하는 것이다.
mysql에서 xml파일로 export가 가능한걸 볼 수 있을 것이다.
데이터를 다룰수 있다.
csv는 ,로 데이터를 구분했다면 xml은 태그로 데이터를 구분 한 것이다.
xml = 개발자들에게 정보를 제공하기 위해 사용된다.

*application 객체
application 객체에서 이름과 값을 설정 할 수 있다.
application.setAttribute(name, value);
서버가 끝나면 다시 설정 후 불러 와야지 null이 안뜬다.
서버가 계속 열려있는 상태에서 객체에 설정되어 있는 값을 불러 올 수 있다.
application.getAttribute(name);

*request
request 객체는 사용자의 한번의 요청에만 값이 받아진다.
request 객체가 얼마만큼 존재하는지 알아야 한다.
addReqAtt와 getReqAtt에서 봤듯이  request를 addReqAtt에서 이미 get했으므로
getReqAtt에서 get하는 요청은 새로운 요청이다.

application으로 값을 담으면 applictaion은 서버가 계속 켜질때 동안 값이 유지 되므로
전역변수 처럼 누가 값을 바꾸면 계속 바뀌게 된다.

* forward
두개의 jsp 흐름을 하나로 합친다. 우리가 request와 sendRedirect를 쓰면 총 두번의 요청이 되므로
결과 보여지는 창에선 null이 된다. 두개의 jsp를 하나로 합치는 forward


dispatcher는 forward를 할 수 있는 것이며 페이지의 흐름을 이동 시킬수 있다.


*<%= > 와 out.println();
두개는 자바 흐름도 같다. <%= > 는 자동으로 자바 코드로 변환되는데 그때 변환되는 값이 out.println();이기 때문이다.
차이가 있다면 <%= >는 태그에 쓸수 있어서 꾸밀수 있다. 